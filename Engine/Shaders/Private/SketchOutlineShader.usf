//My-Add-SketchPipeline
#include "Common.ush"
#include "ScreenPass.ush"

#define PI2 6.28318530717959
#define RANGE 32
#define STEP 2
#define ANGLENUM 4
#define MAGIC_GRAD_THRESH 	  0.1
#define MAGIC_SENSITIVITY     10
#define MAGIC_COLOR           0.25

Texture2D InputSceneColorTexture;
Texture2D InputWorldNormalTexture;
Texture2D InputSketchDataTexture;

float4 SketchOutlineColor;
float2 Resolution;

float4 getCol(float2 pos)
{
	float mask = InputSketchDataTexture.Load(int3(pos, 0)).w;
	return InputWorldNormalTexture.Load(int3(pos, 0)) * mask;
}

float getVal(float2 pos)
{
	float4 c = getCol(pos);
	return dot(c.xyz, float3(0.2126, 0.7152, 0.0722));
}

float2 getGrad(float2 pos, float eps)
{
	float2 d = float2(eps, 0);
	return float2(getVal(pos + d.xy) - getVal(pos - d.xy), getVal(pos + d.yx) - getVal(pos - d.yx)) / eps / 2.0;
}

float2 pR(float2 p, float a)
{
	return cos(a) * p + sin(a) * float2(p.y, -p.x);
}

float absCircular(float t)
{
	float a = floor(t + 0.5);
	return mod(abs(a - t), 1.0);
}

float4 SketchOutLine(float4 color, float2 pos)
{
	float weight = 1.0;

	for (float j = 0.0; j < ANGLENUM; j += 1.0)
	{
		float2 dir = float2(1, 0);
		dir = pR(dir, j * PI2 / (2.0 * ANGLENUM));
		
		float2 grad = float2(-dir.y, dir.x);
		
		for (float i = -RANGE; i <= RANGE; i += STEP)
		{
			float2 pos2 = pos + normalize(dir) * i;
			
			if (pos2.y < 0.0 || pos2.x < 0.0 || pos2.x > Resolution.x || pos2.y > Resolution.y)
				continue;
			
			float2 g = getGrad(pos2, 1.0);
			if (length(g) < MAGIC_GRAD_THRESH)
				continue;
			
			weight -= pow(abs(dot(normalize(grad), normalize(g))), MAGIC_SENSITIVITY) / floor((2.0 * RANGE + 1.0) / STEP) / ANGLENUM;
		}
	}

#ifndef GRAYSCALE
	float4 col = getCol(pos);
#else
	    float4 col = float4(getVal(pos));
#endif

	float4 background = lerp(col, float4(1.0, 1.0, 1.0, 1.0), MAGIC_COLOR);

	float r = length(pos - Resolution.xy * 0.5) / Resolution.x;
	float vign = 1.0 - r * r * r;

	float a = 1;

	float4 fragColor = vign * lerp(float4(0.0, 0.0, 0.0, 0.0), background, weight) + float4(a, a, a, a) / 25;

	float mask = InputSketchDataTexture.Load(int3(pos, 0)).w;
	fragColor -= (1 - mask) * MAGIC_COLOR;
	return lerp(float4(0, 0, 0, 0), color * weight, weight);
}

float GrayScale(float3 color)
{
	return 0.299 * color.x + 0.578 * color.y + 0.114 * color.z;
}

float4 AddHatch(float4 color, float2 pos)
{
	float4 sketchData = InputSketchDataTexture.Load(int3(pos, 0));

	float mask = sketchData.w;
	float shade = saturate(pow(sketchData.x, 0.5));
	float shadow = saturate(sketchData.y);
	float grayScale = GrayScale(color.xyz);

	float4 tempColor = color;
	color *= (1 - mask);
	color += (tempColor * (1 - sketchData.z) + sketchData.z) * mask;

	color = grayScale < shade ? color : lerp(shade, color, 0.5);
	grayScale = GrayScale(color.xyz);
	color = grayScale < shadow ? color : lerp(shadow, color, 0.5);

	return color;
}

void MainPS(float4 SvPosition : SV_Position, out float4 OutColor : SV_Target0)
{
	float2 pos = SvPosition.xy;
	OutColor = InputSceneColorTexture.Load(int3(pos, 0));
	OutColor = AddHatch(OutColor, pos);
	OutColor = SketchOutLine(OutColor, pos);
}
//End-25/06/24
